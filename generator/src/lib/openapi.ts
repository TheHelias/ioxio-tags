/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/dataproduct/fetch/{dataspace_domain}/{product_path}": {
    /** Fetch a data product from the dataspace */
    post: operations["account_status_dataproduct_fetch__dataspace_domain___product_path__post"];
  };
  "/tag/verify/v1/": {
    /** Verify the COSE signature in a IOXIO Tag -code */
    post: operations["verify_v1_tag_verify_v1__post"];
  };
  "/tag/metadata/v1/": {
    /** Fetch and parse the metadata necessary for the tag from the issuer's published metadata */
    post: operations["metadata_v1_tag_metadata_v1__post"];
  };
  "/tag/generate/secure/v1/": {
    /** Generate a new IOXIO Tag with COSE signature */
    post: operations["generate_secure_v1_tag_generate_secure_v1__post"];
  };
  "/tag/generate/url/v1/": {
    /** Generate a new simple IOXIO Tag with only URL data */
    post: operations["generate_url_v1_tag_generate_url_v1__post"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** DataProductFetchRequest */
    DataProductFetchRequest: Record<string, never>;
    /** GenerateSecureV1Request */
    GenerateSecureV1Request: {
      /** Issuer to be put in the code */
      iss: string;
      /** Product category to be put in the code */
      product: string;
      /** Unique ID to be put in the code */
      id: string;
      /** If the generated signature should be valid or not */
      valid: boolean;
    };
    /** GenerateURLV1Request */
    GenerateURLV1Request: {
      /** Issuer to be put in the code */
      iss: string;
      /** Product category to be put in the code */
      product: string;
      /** Unique ID to be put in the code */
      id: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MetadataV1Request */
    MetadataV1Request: {
      /** Issuer of the code, aka iss from the QR code data */
      iss: string;
      /** Product category, aka product from the QR code data */
      product: string;
    };
    /** MetadataV1Response */
    MetadataV1Response: {
      /** URL to the logo of the issuer */
      logo_url: string;
      /** URL to a product picture */
      image_url: string;
      /** Base domain of the dataspace the product data will be on */
      product_dataspace: string;
      /** Map of locale in IETF BCP 47 format (en-US) to the name of the product in that language */
      names: {
        [key: string]: string;
      };
      /** List of supported data products for this product */
      supported_dataproducts: components["schemas"]["SupportedDataproduct"][];
    };
    /** SupportedDataproduct */
    SupportedDataproduct: {
      /** Path for the data product on the dataspace */
      path: string;
      /** The supported source for this data product on the dataspace */
      source: string;
    };
    /** TagsErrorResponse */
    TagsErrorResponse: {
      /** Error */
      error: string;
      /** Code */
      code: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VerifyV1Request */
    VerifyV1Request: {
      /** Scanned text from QR Code */
      code: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Fetch a data product from the dataspace */
  account_status_dataproduct_fetch__dataspace_domain___product_path__post: {
    parameters: {
      path: {
        dataspace_domain: string;
        product_path: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["DataProductFetchRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Verify the COSE signature in a IOXIO Tag -code */
  verify_v1_tag_verify_v1__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyV1Request"];
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["TagsErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Fetch and parse the metadata necessary for the tag from the issuer's published metadata */
  metadata_v1_tag_metadata_v1__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MetadataV1Request"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["MetadataV1Response"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["TagsErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Generate a new IOXIO Tag with COSE signature */
  generate_secure_v1_tag_generate_secure_v1__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateSecureV1Request"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "image/png": unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["TagsErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Generate a new simple IOXIO Tag with only URL data */
  generate_url_v1_tag_generate_url_v1__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerateURLV1Request"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "image/png": unknown;
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["TagsErrorResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
